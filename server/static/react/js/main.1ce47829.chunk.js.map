{"version":3,"sources":["store/terminal-history/actions.ts","store/terminal-history/types.ts","components/command-prompt.component.tsx","store/current-image/actions.ts","store/current-image/types.ts","components/command-line.component.tsx","components/draggable.component.tsx","components/image-display.component.tsx","components/test.tsx","store/current-user/actions.ts","store/current-user/types.ts","theme/theme.ts","App.js","serviceWorker.js","store/terminal-history/reducers.ts","store/current-user/reducers.ts","store/current-image/reducers.ts","index.tsx"],"names":["addTerminalHistoryEntries","newEntries","type","payload","useStyles","makeStyles","root","width","inputRoot","input","color","padding","backgroundColour","commandPrompt","marginRight","spacing","connect","currentUser","value","onChange","onKeyDown","className","classes","commandPromptLabel","Box","display","justifyContent","alignItems","flexDirection","flexWrap","classnames","Typography","noWrap","InputBase","inputProps","fullWidth","setCurrentImage","imageFileName","textAlign","backgroundColor","borderRadius","height","overflow","overflowY","terminal","margin","label","terminalInput","terminalHistory","dispatch","addToHistory","clearHistory","displayMap","test","callback","useState","inputValue","setInputValue","files","terminalRootRef","useRef","useEffect","current","scrollIntoView","behavior","block","ref","map","entry","align","line","event","target","key","command","split","temp","push","console","log","dialog","dialogTitle","smallText","fontSize","DraggablePaperComponent","props","handle","cancel","Paper","DraggableDialog","children","open","onClose","title","Dialog","PaperComponent","aria-labelledby","maxWidth","DialogTitle","style","cursor","id","variant","DialogContent","DialogActions","Button","onClick","currentImage","clearImage","openImage","setOpenImage","src","setUser","user","newUser","setFiles","fetch","then","response","json","catch","error","text","JSON","parse","theme","createMuiTheme","typography","fontFamily","join","fontWeightLight","fontWeightRegular","fontWeightMedium","App","window","token","Boolean","location","hostname","match","initialState","List","terminalHistoryReducer","state","action","concat","currentUserReducer","currentImageReducer","store","createStore","combineReducers","applyMiddleware","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"js/main.1ce47829.chunk.js","sourcesContent":["import { List } from 'immutable'\nimport {\n  TerminalHistoryEntry,\n  ADD_TERMINAL_HISTORY_ENTRIES,\n  CLEAR_TERMINAL_HISTORY,\n  TerminalHistoryActionTypes,\n} from './types'\n\n// TypeScript infers that this function is returning AddHistoryEntriesAction\nexport function addTerminalHistoryEntries(newEntries: TerminalHistoryEntry[]): TerminalHistoryActionTypes {\n  return {\n    type: ADD_TERMINAL_HISTORY_ENTRIES,\n    payload: newEntries,\n  }\n}\n\n// TypeScript infers that this function is returning ClearTerminalHistoryAction\nexport function clearTerminalHistory(): TerminalHistoryActionTypes {\n  return {\n    type: CLEAR_TERMINAL_HISTORY,\n  }\n}\n","import { List } from 'immutable'\n\nexport type TerminalHistoryEntry = {\n  type: 'command'\n  value: string\n} | {\n  type: 'output',\n  value: string[]\n}\n\nexport type TerminalHistoryState = List<TerminalHistoryEntry>\n\nexport const ADD_TERMINAL_HISTORY_ENTRIES = 'ADD_TERMINAL_HISTORY_ENTRIES'\nexport const CLEAR_TERMINAL_HISTORY = 'CLEAR_TERMINAL_HISTORY'\n\ninterface AddHistoryEntriesAction {\n  type: typeof ADD_TERMINAL_HISTORY_ENTRIES\n  payload: TerminalHistoryEntry[]\n}\n\ninterface ClearTerminalHistoryAction {\n  type: typeof CLEAR_TERMINAL_HISTORY\n}\n\nexport type TerminalHistoryActionTypes = AddHistoryEntriesAction | ClearTerminalHistoryAction\n","import React from 'react'\nimport { Box, InputBase, makeStyles, Typography } from '@material-ui/core'\nimport classnames from 'classnames'\nimport { AppState } from '..'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { connect, MapDispatchToProps } from 'react-redux'\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    width: '100%',\n  },\n  inputRoot: {\n    width: '100%',\n  },\n  input: {\n    color: 'white',\n    padding: 0,\n\n    backgroundColour: 'red',\n    '& .MuiInputBase-input': {\n      padding: 0,\n      width: '100%',\n    },\n    '& .MuiInputBase-root': {\n      width: '100%',\n    },\n  },\n  commandPrompt: {\n    marginRight: spacing(1),\n  },\n}))\n\ntype MappedState = ReturnType<typeof mapStateToProps>\n\ninterface Props {\n  value: string\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void\n  onKeyDown: (e: React.KeyboardEvent) => void\n  className?: string\n}\n\nconst CommandPrompt: React.FC<MappedState & Props> = ({\n  currentUser,\n  value,\n  onChange,\n  onKeyDown,\n  className = '',\n}) => {\n  const classes = useStyles()\n  const commandPromptLabel = `${currentUser} $`\n\n  return (\n    <Box\n      display='flex'\n      justifyContent='flex-start'\n      alignItems='center'\n      flexDirection='row'\n      flexWrap='nowrap'\n      className={classnames(classes.root, className)}\n    >\n    <Box>\n      <Typography className={classes.commandPrompt} noWrap>{commandPromptLabel}</Typography>\n    </Box>\n    <InputBase\n      className={classes.input}\n      value={value}\n      onChange={onChange}\n      inputProps={{ 'aria-label': 'naked' }}\n      onKeyDown={onKeyDown}\n      fullWidth\n      classes={{ // this doesn't work :(\n        root: classes.inputRoot,\n      }}\n    />\n  </Box>\n  )\n}\n\nconst mapStateToProps = ({ currentUser }: AppState) => ({\n  currentUser,\n})\n\nexport default connect(mapStateToProps)(CommandPrompt)\n","import {\n  SET_CURRENT_IMAGE,\n  CurrentImageTypes,\n} from './types'\n\nexport function setCurrentImage(imageFileName: string): CurrentImageTypes {\n  return {\n    type: SET_CURRENT_IMAGE,\n    imageFileName,\n  }\n}\n","export type CurrentImageState = string // name of image file\n\nexport const SET_CURRENT_IMAGE = 'SET_CURRENT_IMAGE'\n\ninterface SetCurrentImageAction {\n  type: typeof SET_CURRENT_IMAGE\n  imageFileName: string\n}\n\nexport type CurrentImageTypes = SetCurrentImageAction // | ClearTerminalHistoryAction\n","import React, { useState, useEffect, useRef } from 'react'\nimport { Box, makeStyles, Typography, Icon } from '@material-ui/core'\nimport { List } from 'immutable'\nimport CommandPrompt from './command-prompt.component'\nimport { processCommand } from '../utils/commands'\nimport DraggableDialog from './draggable.component'\nimport { TerminalHistoryEntry } from '../store/terminal-history/types.js'\nimport { AppState } from '..'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AnyAction } from 'redux'\nimport { connect } from 'react-redux'\nimport { addTerminalHistoryEntries, clearTerminalHistory } from '../store/terminal-history/actions'\nimport { setCurrentImage } from '../store/current-image/actions'\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    textAlign: 'left',\n    backgroundColor: 'black',\n    color: 'white',\n    borderRadius: '5px',\n    height: '55em',\n    width: '70em',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    overflow: 'hidden',\n    overflowY: 'scroll',\n  },\n  terminal: {\n    padding: spacing(4),\n  },\n  margin: {\n    margin: spacing(1),\n  },\n  label: { // command prompt\n    marginRight: spacing(1),\n    color: '#1ec700',\n  },\n  terminalInput: {\n    color: '#1ec700',\n  },\n}))\n\ntype MappedDispatch = ReturnType<typeof mapDispatchToProps>\ntype MappedState = ReturnType<typeof mapStateToProps>\n\ninterface Props {\n  test?: string\n  callback?: any\n}\n\nconst CommandLineComponent: React.FC<MappedDispatch & MappedState & Props> = ({\n  test = '',\n  currentUser,\n  terminalHistory,\n  addToHistory,\n  clearHistory,\n  displayMap,\n  callback,\n}) => {\n  const classes = useStyles()\n  // const [history, setHistory] = useState<List<TerminalHistoryEntry>>(List())\n  const [inputValue, setInputValue] = useState<string>('')\n  // const [commands, setCommands] = useState<string[]>([])\n  const [files, setFiles] = useState<{ [key in string]: string[] }>({})\n  const terminalRootRef = useRef<HTMLDivElement>(null)\n\n  // TODO: clean up this fucking logic\n  const onTerminalInputKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      if (inputValue === 'clear') {\n        // setHistory(List())\n        clearHistory()\n        setInputValue('')\n        return\n      }\n      const command = inputValue.split(' ')[0]\n      const temp: TerminalHistoryEntry[] = []\n      if (command === 'cat') { // testing file format\n        temp.push({ type: 'command', value: inputValue || '' })\n        temp.push({ type: 'output', value: files['announcement.txt'] })\n        // setHistory(history.concat(temp))\n        addToHistory(temp)\n        setInputValue('')\n        return\n      } else if (command === 'map') {\n        console.log('what??')\n        displayMap()\n      }\n      temp.push({ type: 'command', value: inputValue || '' })\n      if (command) {\n        temp.push({ type: 'output', value: [`${command}: command not found. Use 'help' to list available commands.`] })\n      }\n      // setHistory(history.concat(temp))\n      addToHistory(temp)\n      setInputValue('')\n    }\n  }\n\n  const scrollToBottom = () => {\n    if (terminalRootRef.current) {\n      terminalRootRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' })\n    }\n  }\n  useEffect(scrollToBottom, [terminalHistory])\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.terminal} ref={terminalRootRef}>\n        {terminalHistory.map((entry) => (\n          <Box\n            display='flex'\n            justifyContent='flex-start'\n            alignItems='center'\n            flexDirection='row'\n            flexWrap='nowrap'\n          >\n            {entry.type === 'command' && (<>\n              <Typography align='left' className={classes.label} noWrap>{`${currentUser} $`}</Typography>\n              <Typography align='left'>{entry.value}</Typography></>)}\n            {entry.type === 'output' && (<Box display='flex' justifyContent='flex-start' alignItems='flex-start' flexDirection='column'>\n              {entry.value.map((line: string) => {\n                return line === \"\\n\" ? <br /> : <Typography align='left'>{line}</Typography>\n              })}\n            </Box>)}\n          </Box>\n        ))}\n\n        <CommandPrompt\n          value={inputValue}\n          onChange={(event) => {\n            setInputValue(event.target.value)\n          }}\n          onKeyDown={onTerminalInputKeyDown}\n          className={classes.terminalInput}\n        />\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = ({ terminalHistory, currentUser }: AppState) => ({\n  terminalHistory,\n  currentUser,\n})\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => ({\n  addToHistory: (newEntries: TerminalHistoryEntry[]) => dispatch(addTerminalHistoryEntries(newEntries)),\n  clearHistory: () => dispatch(clearTerminalHistory()),\n  displayMap: () => dispatch(setCurrentImage('map')),\n})\n\n// export default Test\nexport default connect(mapStateToProps, mapDispatchToProps)(CommandLineComponent)\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Paper from '@material-ui/core/Paper'\nimport Draggable from 'react-draggable'\nimport classnames from 'classnames'\nimport { makeStyles, Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  dialog: {\n    padding: 0,\n    borderRadius: '5px',\n    '& .MuiDialogContent-root': {\n      padding: 0,\n    },\n  },\n  dialogTitle: {\n    padding: spacing(0.5),\n    backgroundColor: '#E8E8E8',\n  },\n  margin: {\n    margin: spacing(1),\n  },\n  label: {\n    marginRight: spacing(1),\n  },\n  smallText: {\n    fontSize: '12px',\n  }\n}))\n\nfunction DraggablePaperComponent(props: any) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\ninterface Props {\n  open: boolean\n  onClose: () => void\n  children?: React.ReactNode\n  className?: string\n  title?: string\n}\n\nconst DraggableDialog: React.FC<Props> = ({ children, className, open, onClose, title = '' }) => {\n  const classes = useStyles()\n\n  return (\n      <Dialog\n        open={open}\n        onClose={onClose}\n        PaperComponent={DraggablePaperComponent}\n        aria-labelledby=\"draggable-dialog-title\"\n        className={classnames(classes.dialog, className)}\n        maxWidth='lg'\n      >\n        <DialogTitle style={{ cursor: 'move' }} className={classes.dialogTitle} id=\"draggable-dialog-title\">\n          <Typography variant='body1' align='center' className={classes.smallText}>{title}</Typography>\n        </DialogTitle>\n        <DialogContent>\n          {children}\n        </DialogContent>\n        <DialogActions>\n          <Button variant=\"contained\" color=\"primary\" onClick={onClose}>Close</Button>\n        </DialogActions>\n      </Dialog>\n  )\n}\n\nexport default DraggableDialog\n","import { connect } from 'react-redux'\nimport { AnyAction } from 'redux'\nimport React, { useState, useEffect } from 'react'\nimport DraggableDialog from './draggable.component'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AppState } from '..'\nimport { setCurrentImage } from '../store/current-image/actions'\n\ntype MappedDispatch = ReturnType<typeof mapDispatchToProps>\ntype MappedState = ReturnType<typeof mapStateToProps>\n\nconst ImageDisplayComponent: React.FC<MappedDispatch & MappedState> = ({ currentImage, clearImage }) => {\n  const [openImage, setOpenImage] = useState(false)\n  \n  useEffect(() => {\n    if (currentImage) {\n      setOpenImage(true)\n    }\n  }, [currentImage])\n\n  const onClose = () => {\n    clearImage()\n    setOpenImage(false)\n  }\n\n  return (\n    <DraggableDialog title='image' open={openImage} onClose={onClose}>\n      <img src={`/${currentImage}`} style={{ height: '50em', width: '50em' }} />\n    </DraggableDialog>\n  )\n}\n\nconst mapStateToProps = ({ currentImage }: AppState) => ({\n  currentImage\n})\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => ({\n  clearImage: () => dispatch(setCurrentImage('')),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageDisplayComponent)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { Box, makeStyles, Typography, Icon, Dialog, DialogTitle, DialogContent } from '@material-ui/core'\nimport { List } from 'immutable'\nimport CommandPrompt from './command-prompt.component'\nimport { processCommand } from '../utils/commands'\nimport DraggableDialog from './draggable.component'\nimport { TerminalHistoryEntry } from '../store/terminal-history/types.js'\nimport { AppState } from '..'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AnyAction } from 'redux'\nimport { connect } from 'react-redux'\nimport { addTerminalHistoryEntries, clearTerminalHistory } from '../store/terminal-history/actions'\nimport { setCurrentUser } from '../store/current-user/actions'\nimport CommandLineComponent from './command-line.component'\nimport DraggablePaperComponent from './draggable-paper.component'\nimport Draggable from 'react-draggable'\nimport { setCurrentImage } from '../store/current-image/actions'\nimport ImageDisplayComponent from './image-display.component'\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    textAlign: 'left',\n    padding: spacing(4),\n    backgroundColor: 'black',\n    color: 'white',\n    borderRadius: '5px',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n  },\n  margin: {\n    margin: spacing(1),\n  },\n  label: { // command prompt\n    marginRight: spacing(1),\n    color: '#1ec700',\n  },\n  terminalInput: {\n    color: '#1ec700',\n  },\n  terminal: {\n    padding: 0,\n    borderRadius: '5px',\n    '& .MuiDialogContent-root': {\n      padding: 0,\n    },\n  },\n}))\n\ntype MappedDispatch = ReturnType<typeof mapDispatchToProps>\ntype MappedState = ReturnType<typeof mapStateToProps>\n\ninterface Props {\n  test?: string\n}\n\nconst Test: React.FC<MappedDispatch & MappedState & Props> = ({ test = '', setUser, terminalHistory, addToHistory, clearHistory }) => {\n  const classes = useStyles()\n  const commandPrompt = 'alice@test $'\n  // const [history, setHistory] = useState<List<TerminalHistoryEntry>>(List())\n  const [inputValue, setInputValue] = useState<string>('')\n  const [commands, setCommands] = useState<string[]>([])\n  const [files, setFiles] = useState<{ [key in string]: string[] }>({})\n  const terminalRootRef = useRef<HTMLDivElement>(null)\n\n  // TODO: refactor to use redux-thunk\n  useEffect(() => {\n    fetch('/commands')\n      .then(response => {\n        // setFiles(response.formData)\n        console.log(response.json())\n      })\n      .catch(error => console.log('error'))\n\n    fetch('/files')\n      .then(response => response.text())\n      .then(response => {\n        setFiles(JSON.parse(response))\n        console.log(response)\n      })\n      .catch(error => console.log('error'))\n    setUser('a_cai@corona')\n  }, [])\n\n\n  // const [openImage, setOpenImage] = useState(false)\n\n  return (\n    <Box display='flex' justifyContent='center' alignItems='center'>\n      <div className={classes.terminal}>\n        <CommandLineComponent callback={() => setCurrentImage('map')} />\n      </div>\n      <ImageDisplayComponent />\n      {/* <DraggableDialog title='image' open={openImage} onClose={() => setOpenImage(false)}>\n        <img src='/map' style={{ height: '50em', width: '50em' }} />\n      </DraggableDialog> */}\n    </Box>\n  )\n}\n\nconst mapStateToProps = ({ terminalHistory }: AppState) => ({\n  terminalHistory,\n})\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => ({\n  addToHistory: (newEntries: TerminalHistoryEntry[]) => dispatch(addTerminalHistoryEntries(newEntries)),\n  clearHistory: () => dispatch(clearTerminalHistory()),\n  setUser: (user: string) => dispatch(setCurrentUser(user))\n})\n\n// export default Test\nexport default connect(mapStateToProps, mapDispatchToProps)(Test)\n","import {\n  SET_CURRENT_USER,\n  CurrentUserActionTypes,\n} from './types'\n\nexport function setCurrentUser(newUser: string): CurrentUserActionTypes {\n  return {\n    type: SET_CURRENT_USER,\n    newUser,\n  }\n}\n","export type CurrentUserState = string // TODO: this should technically be keyof the user info obj\n\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER'\n\ninterface SetCurrentUserAction {\n  type: typeof SET_CURRENT_USER\n  newUser: string\n}\n\nexport type CurrentUserActionTypes = SetCurrentUserAction // | ClearTerminalHistoryAction\n","import { createMuiTheme } from '@material-ui/core/styles'\n\nexport const theme = createMuiTheme({\n  typography: {\n    fontFamily: [\n      'Roboto Mono',\n      '\"Open Sans\"',\n      'Lato',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n    ].join(','),\n    fontSize: 14,\n    fontWeightLight: 300,\n    fontWeightRegular: 400,\n    fontWeightMedium: 500\n  }\n})\n","import React from 'react';\nimport './App.css';\nimport Test from './components/test.tsx'\nimport { MuiThemeProvider } from '@material-ui/core/styles'\nimport { theme } from './theme/theme.ts'\n\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    {/* <Provider store={store}>\n      <Router history={appHistory} routes={Routes} />\n    </Provider> */}\n    <div className=\"App\">\n      <header>\n        <p>My Token = {window.token}</p>\n      </header>\n      <body>\n        <Test test={'hello world!'} />\n      </body>\n    </div>\n  </MuiThemeProvider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { List } from 'immutable'\nimport {\n  TerminalHistoryEntry,\n  ADD_TERMINAL_HISTORY_ENTRIES,\n  CLEAR_TERMINAL_HISTORY,\n  TerminalHistoryActionTypes,\n  TerminalHistoryState,\n} from './types'\n\nconst initialState: TerminalHistoryState = List()\n\nexport function terminalHistoryReducer(state = initialState, action: TerminalHistoryActionTypes): TerminalHistoryState {\n  switch (action.type) {\n    case ADD_TERMINAL_HISTORY_ENTRIES:\n      return state.concat(action.payload)\n    case CLEAR_TERMINAL_HISTORY:\n      return initialState\n    default:\n      return state\n  }\n}\n","import {\n    CurrentUserState,\n    SET_CURRENT_USER,\n  CurrentUserActionTypes,\n} from './types'\n\nconst initialState: CurrentUserState = ''\n\nexport function currentUserReducer(state = initialState, action: CurrentUserActionTypes): CurrentUserState {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return action.newUser\n    default:\n      return state\n  }\n}\n","import {\n  CurrentImageState,\n  SET_CURRENT_IMAGE,\n  CurrentImageTypes,\n} from './types'\n\nconst initialState: CurrentImageState = ''\n\nexport function currentImageReducer(state = initialState, action: CurrentImageTypes): CurrentImageState {\n  switch (action.type) {\n    case SET_CURRENT_IMAGE:\n      return action.imageFileName\n    default:\n      return state\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport logger from 'redux-logger'\n\nimport { terminalHistoryReducer } from './store/terminal-history/reducers'\nimport { currentUserReducer } from './store/current-user/reducers';\nimport { currentImageReducer } from './store/current-image/reducers';\n\nconst createRootReducer = () => combineReducers({\n  terminalHistory: terminalHistoryReducer,\n  currentUser: currentUserReducer,\n  currentImage: currentImageReducer,\n})\n\nexport type AppState = Exclude<Parameters<ReturnType<typeof createRootReducer>>[0], undefined>\n\n// const rootReducer = combineReducers({\n//   terminalHistory: terminalHistoryReducer,\n// })\n\nconst store = createStore(\n  createRootReducer(),\n  applyMiddleware(logger),\n  // composeEnhancers(\n  //     enhancer,\n  //     middlewareApplication\n  // )\n);\n\nReactDOM.render(\n  <Provider store={store} >\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}