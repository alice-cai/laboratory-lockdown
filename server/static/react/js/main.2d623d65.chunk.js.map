{"version":3,"sources":["components/command-prompt.component.tsx","store/terminal-history/actions.ts","store/terminal-history/types.ts","store/current-image/actions.ts","store/current-image/types.ts","store/current-user/types.ts","store/commands/actions.ts","store/commands/types.ts","components/audio-player.tsx","components/command-line.component.tsx","store/current-user/actions.ts","store/files/actions.ts","store/files/types.ts","utils/commands.ts","utils/autocomplete.ts","components/draggable.component.tsx","components/image-display.component.tsx","components/game-intro.component.tsx","components/test.tsx","theme/theme.ts","App.js","serviceWorker.js","store/terminal-history/reducers.ts","store/current-user/reducers.ts","store/current-image/reducers.ts","store/commands/reducers.ts","store/files/reducers.ts","index.tsx"],"names":["useStyles","makeStyles","root","width","inputRoot","input","color","padding","backgroundColour","commandPrompt","marginRight","spacing","connect","currentUser","value","onChange","onKeyDown","className","classes","commandPromptLabel","Box","display","justifyContent","alignItems","flexDirection","flexWrap","classnames","Typography","noWrap","InputBase","inputProps","fullWidth","spellCheck","addTerminalHistoryEntries","newEntries","type","payload","setCurrentImage","imageFileName","USERS","setCommands","newCommands","useAudio","url","useState","Audio","audio","playing","setPlaying","useEffect","play","pause","addEventListener","textAlign","backgroundColor","borderRadius","height","overflow","overflowY","terminal","terminalInput","marginBottom","terminalHistory","commands","files","dispatch","addToHistory","clearHistory","displayImage","sshToNewUser","user","a","fetch","then","response","text","JSON","parse","catch","error","console","newFiles","newUser","switchUser","Stack","commandHistory","setCommandHistory","commandHistoryIndex","setCommandHistoryIndex","inputValue","setInputValue","terminalRootRef","useRef","playClickSound","playAccessGrantedSound","playRyanFisherWelcome","playJennaForrestWelcome","playVincentChapmanWelcome","playNaomiReyesWelcome","playDianaHarrisWelcome","playEricFreedmanWelcome","playRoselynBarreraWelcome","playYulianaHinesWelcome","playAudreyEmersonWelcome","includes","soundMap","r_fisher","j_forrest","v_chapman","n_reyes","d_harris","e_freedman","r_barrera","y_hines","a_emerson","setTimeout","current","scrollIntoView","behavior","block","ref","map","entry","align","line","event","target","key","push","inputStrings","split","command","args","slice","updatedTerminalHistory","appendToTerminalOutput","output","newEntry","Object","keys","sortedFileNames","sort","f1","f2","localeCompare","fileName","file_type","content","userName","enteredPassword","actualPassword","message","handleSsh","entries","forEach","commandName","description","processCommand","size","get","preventDefault","autocompletedCommand","currentTerminalInput","lastInput","pop","autocompleteMatches","startsWith","autocompletedFileName","length","strings","s1","s2","prefix","string","substring","findCommonPrefix","commandWithoutLastWord","join","getAutocompleteFileName","dialog","dialogTitle","margin","label","smallText","fontSize","DraggablePaperComponent","props","handle","cancel","Paper","DraggableDialog","children","open","onClose","title","Dialog","PaperComponent","aria-labelledby","maxWidth","DialogTitle","style","cursor","id","variant","DialogContent","DialogActions","Button","onClick","image","maxHeight","currentImage","clearImage","openImage","setOpenImage","src","alt","fontFamily","fontWeight","userSelect","marginTop","marginBlockStart","marginBlockEnd","button","lightGreen","GameIntroComponent","onButtonClick","initDefaultCommands","defaultCommands","startGame","setStartGame","theme","createMuiTheme","palette","primary","main","secondary","typography","fontWeightLight","fontWeightRegular","fontWeightMedium","App","Helmet","Boolean","window","location","hostname","match","initialState","List","terminalHistoryReducer","state","action","concat","currentUserReducer","currentImageReducer","commandReducer","fileReducer","store","createStore","combineReducers","applyMiddleware","ReduxLogger","ReduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.2d623d65.chunk.js","sourcesContent":["import React from 'react'\nimport { Box, InputBase, makeStyles, Typography } from '@material-ui/core'\nimport classnames from 'classnames'\nimport { AppState } from '..'\nimport { connect } from 'react-redux'\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    width: '100%',\n  },\n  inputRoot: {\n    width: '100%',\n  },\n  input: {\n    color: 'white',\n    padding: 0,\n\n    backgroundColour: 'red',\n    '& .MuiInputBase-input': {\n      padding: 0,\n      width: '100%',\n    },\n    '& .MuiInputBase-root': {\n      width: '100%',\n    },\n  },\n  commandPrompt: {\n    marginRight: spacing(1),\n  },\n}))\n\ntype MappedState = ReturnType<typeof mapStateToProps>\n\ninterface Props {\n  value: string\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void\n  onKeyDown: (e: React.KeyboardEvent) => void\n  className?: string\n}\n\nconst CommandPrompt: React.FC<MappedState & Props> = ({\n  currentUser,\n  value,\n  onChange,\n  onKeyDown,\n  className = '',\n}) => {\n  const classes = useStyles()\n  const commandPromptLabel = `${currentUser} $`\n\n  return (\n    <Box\n      display='flex'\n      justifyContent='flex-start'\n      alignItems='center'\n      flexDirection='row'\n      flexWrap='nowrap'\n      className={classnames(classes.root, className)}\n    >\n    <Box>\n      <Typography className={classes.commandPrompt} noWrap>{commandPromptLabel}</Typography>\n    </Box>\n    <InputBase\n      className={classes.input}\n      value={value}\n      onChange={onChange}\n      inputProps={{ 'aria-label': 'naked' }}\n      onKeyDown={onKeyDown}\n      fullWidth\n      spellCheck='false'\n      classes={{ root: classes.inputRoot }}\n    />\n  </Box>\n  )\n}\n\nconst mapStateToProps = ({ currentUser }: AppState) => ({\n  currentUser,\n})\n\nexport default connect(mapStateToProps)(CommandPrompt)\n","import {\n  TerminalHistoryEntry,\n  ADD_TERMINAL_HISTORY_ENTRIES,\n  CLEAR_TERMINAL_HISTORY,\n  TerminalHistoryActionTypes,\n} from './types'\n\n// TypeScript infers that this function is returning AddHistoryEntriesAction\nexport function addTerminalHistoryEntries(newEntries: TerminalHistoryEntry[]): TerminalHistoryActionTypes {\n  return {\n    type: ADD_TERMINAL_HISTORY_ENTRIES,\n    payload: newEntries,\n  }\n}\n\n// TypeScript infers that this function is returning ClearTerminalHistoryAction\nexport function clearTerminalHistory(): TerminalHistoryActionTypes {\n  return {\n    type: CLEAR_TERMINAL_HISTORY,\n  }\n}\n","import { List } from 'immutable'\n\nexport type TerminalHistoryEntry = {\n  type: 'command'\n  value: string\n} | {\n  type: 'output',\n  value: string[]\n}\n\nexport type TerminalHistoryState = List<TerminalHistoryEntry>\n\nexport const ADD_TERMINAL_HISTORY_ENTRIES = 'ADD_TERMINAL_HISTORY_ENTRIES'\nexport const CLEAR_TERMINAL_HISTORY = 'CLEAR_TERMINAL_HISTORY'\n\ninterface AddHistoryEntriesAction {\n  type: typeof ADD_TERMINAL_HISTORY_ENTRIES\n  payload: TerminalHistoryEntry[]\n}\n\ninterface ClearTerminalHistoryAction {\n  type: typeof CLEAR_TERMINAL_HISTORY\n}\n\nexport type TerminalHistoryActionTypes = AddHistoryEntriesAction | ClearTerminalHistoryAction\n","import {\n  SET_CURRENT_IMAGE,\n  CurrentImageActionTypes,\n} from './types'\n\nexport function setCurrentImage(imageFileName: string): CurrentImageActionTypes {\n  return {\n    type: SET_CURRENT_IMAGE,\n    imageFileName,\n  }\n}\n","export type CurrentImageState = string // name of image file\n\nexport const SET_CURRENT_IMAGE = 'SET_CURRENT_IMAGE'\n\ninterface SetCurrentImageAction {\n  type: typeof SET_CURRENT_IMAGE\n  imageFileName: string\n}\n\nexport type CurrentImageActionTypes = SetCurrentImageAction // | ClearTerminalHistoryAction\n","export const USERS = [\n  \"r_fisher\",\n  \"j_forrest\",\n  \"v_chapman\",\n  \"n_reyes\",\n  \"d_harris\",\n  \"e_freedman\",\n  \"r_barrera\",\n  \"y_hines\",\n  \"a_emerson\",\n] as const\n\nexport type User = typeof USERS[number]\nexport type CurrentUserState = '' | User\n\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER'\n\ninterface SetCurrentUserAction {\n  type: typeof SET_CURRENT_USER\n  newUser: User\n}\n\nexport type CurrentUserActionTypes = SetCurrentUserAction\n","import { AnyAction } from 'redux'\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk'\nimport { AppState } from '../..'\nimport {\n  SET_COMMANDS,\n  Command,\n  CommandActionTypes,\n} from './types'\n\nexport function setCommands(newCommands: {[key in Command]: string}): CommandActionTypes {\n  return {\n    type: SET_COMMANDS,\n    newCommands,\n  }\n}\n\nexport function initDefaultCommands(): ThunkAction<void, AppState, null, AnyAction>  {\n  return async (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n\n    fetch('/commands?user_name=no_user')\n      .then(response => response.text())\n      .then(response => {\n        const defaultCommands = JSON.parse(response)\n        dispatch(setCommands(defaultCommands))\n      })\n      .catch((error) => console.error(`Error fetching default commands: ${error}`))\n  }\n}\n","export type Command = 'ls' | 'cat' | 'ssh' | 'map' | 'help' | 'power'\nexport type CurrentCommandsState = { [key in Command]: string } | {}\n\nexport const SET_COMMANDS = 'SET_COMMANDS'\n\ninterface SetCommandsAction {\n  type: typeof SET_COMMANDS\n  newCommands: { [key in Command]: string }\n}\n\nexport type CommandActionTypes = SetCommandsAction // | ClearTerminalHistoryAction\n","import { useState, useEffect } from 'react'\n\n// Code taken from: https://stackoverflow.com/questions/47686345/playing-sound-in-reactjs\nexport const useAudio = (url: string) => {\n  const [audio] = useState(new Audio(url))\n  const [playing, setPlaying] = useState(false)\n\n  const toggle = () => setPlaying(!playing)\n\n  useEffect(() => {\n    playing ? audio.play() : audio.pause()\n  }, [playing])\n\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false))\n  }, [])\n\n  return toggle\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport { Box, makeStyles, Typography } from '@material-ui/core'\nimport CommandPrompt from './command-prompt.component'\nimport { processCommand } from '../utils/commands'\nimport { TerminalHistoryEntry } from '../store/terminal-history/types.js'\nimport { AppState } from '..'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AnyAction } from 'redux'\nimport { connect } from 'react-redux'\nimport { addTerminalHistoryEntries, clearTerminalHistory } from '../store/terminal-history/actions'\nimport { setCurrentImage } from '../store/current-image/actions'\nimport { Stack } from 'immutable'\nimport { getAutocompleteFileName } from '../utils/autocomplete'\nimport { switchUser } from '../store/current-user/actions'\nimport { useAudio } from './audio-player'\nimport { USERS, User } from '../store/current-user/types'\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    textAlign: 'left',\n    backgroundColor: 'black',\n    color: 'white',\n    borderRadius: '7px',\n    height: '45rem',\n    width: '60rem',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    overflow: 'hidden',\n    overflowY: 'scroll',\n  },\n  terminal: {\n    padding: spacing(4),\n  },\n  commandPrompt: {\n    marginRight: spacing(1),\n    color: '#1ec700',\n  },\n  terminalInput: {\n    color: '#1ec700',\n  },\n  marginBottom: {\n    marginBottom: spacing(0.2),\n  },\n}))\n\ntype MappedDispatch = ReturnType<typeof mapDispatchToProps>\ntype MappedState = ReturnType<typeof mapStateToProps>\n\nconst CommandLineComponent: React.FC<MappedDispatch & MappedState> = ({\n  currentUser,\n  terminalHistory,\n  commands,\n  files,\n  addToHistory,\n  clearHistory,\n  displayImage,\n  sshToNewUser,\n}) => {\n  const classes = useStyles()\n  const [commandHistory, setCommandHistory] = useState<Stack<string>>(Stack())\n  const [commandHistoryIndex, setCommandHistoryIndex] = useState<number>(-1) // index of the command history item being autofilled\n  const [inputValue, setInputValue] = useState<string>('')\n  const terminalRootRef = useRef<HTMLDivElement>(null)\n\n  // I hate this but I can't fuckin figure out how else to do this. I can't call hooks anywhere other than directly\n  // in a React component so I can't put it in a callback or useEffect\n  const playClickSound = useAudio('/audio?file_name=click.mp3')\n  const playAccessGrantedSound = useAudio('/audio?file_name=access_granted.m4a')\n  const playRyanFisherWelcome = useAudio('/audio?file_name=r_fisher.mp3')\n  const playJennaForrestWelcome = useAudio('/audio?file_name=j_forrest.mp3')\n  const playVincentChapmanWelcome = useAudio('/audio?file_name=v_chapman.mp3')\n  const playNaomiReyesWelcome = useAudio('/audio?file_name=n_reyes.mp3')\n  const playDianaHarrisWelcome = useAudio('/audio?file_name=d_harris.mp3')\n  const playEricFreedmanWelcome = useAudio('/audio?file_name=e_freedman.mp3')\n  const playRoselynBarreraWelcome = useAudio('/audio?file_name=r_barrera.mp3')\n  const playYulianaHinesWelcome = useAudio('/audio?file_name=y_hines.mp3')\n  const playAudreyEmersonWelcome = useAudio('/audio?file_name=a_emerson.mp3')\n\n  useEffect(() => {\n    if (!currentUser || !USERS.includes(currentUser)) {\n      return\n    }\n    playAccessGrantedSound()\n    const soundMap: { [key in User]: () => void } = {\n      r_fisher: playRyanFisherWelcome,\n      j_forrest: playJennaForrestWelcome,\n      v_chapman: playVincentChapmanWelcome,\n      n_reyes: playNaomiReyesWelcome,\n      d_harris: playDianaHarrisWelcome,\n      e_freedman: playEricFreedmanWelcome,\n      r_barrera: playRoselynBarreraWelcome,\n      y_hines: playYulianaHinesWelcome,\n      a_emerson: playAudreyEmersonWelcome,\n    }\n    setTimeout(() => soundMap[currentUser](), 500)\n  }, [currentUser])\n\n  const onTerminalInputKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      playClickSound()\n      \n      setCommandHistory(commandHistory.push(inputValue))\n      setCommandHistoryIndex(-1)\n\n      if (inputValue === 'clear') {\n        setCommandHistory(Stack())\n        setCommandHistoryIndex(-1)\n        clearHistory()\n      } else {\n        processCommand(inputValue, commands, files, displayImage, addToHistory, clearHistory, sshToNewUser)\n      }\n      setInputValue('')\n    } else if (event.key === 'ArrowUp') {\n      if (commandHistoryIndex === commandHistory.size - 1) {\n        return\n      }\n      setCommandHistoryIndex(commandHistoryIndex + 1)\n      setInputValue(commandHistory.get(commandHistoryIndex + 1) || '')\n    } else if (event.key === 'ArrowDown') {\n      if (commandHistoryIndex === -1) {\n        return\n      } else if (commandHistoryIndex === 0) {\n        setInputValue('')\n        return\n      }\n      setCommandHistoryIndex(commandHistoryIndex - 1)\n      setInputValue(commandHistory.get(commandHistoryIndex - 1) || '')\n    } else if (event.key === 'Tab') {\n      event.preventDefault()\n      playClickSound()\n      const autocompletedCommand = getAutocompleteFileName(files, inputValue)\n      if (autocompletedCommand) {\n        setInputValue(autocompletedCommand)\n      }\n    } else {\n      setCommandHistoryIndex(-1)\n    }\n  }\n\n  const scrollToBottom = () => {\n    if (terminalRootRef.current) {\n      terminalRootRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' })\n    }\n  }\n  useEffect(scrollToBottom, [terminalHistory])\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.terminal} ref={terminalRootRef}>\n        {terminalHistory.map((entry) => (\n          <Box\n            display='flex'\n            justifyContent='flex-start'\n            alignItems='center'\n            flexDirection='row'\n            flexWrap='nowrap'\n          >\n            {entry.type === 'command' && (\n              <Box display='flex' justifyContent='flex-start' alignItems='flex-start' flexDirection='row' className={classes.marginBottom}>\n                <Typography align='left' className={classes.commandPrompt} noWrap>{`${currentUser} $`}</Typography>\n                <Typography align='left'>{entry.value}</Typography>\n              </Box>\n            )}\n            {entry.type === 'output' && (\n              <Box display='flex' justifyContent='flex-start' alignItems='flex-start' flexDirection='column' className={classes.marginBottom}>\n                {entry.value.map((line: string) => {\n                  return line === \"\\n\" ? <br /> : <Typography align='left'>{line}</Typography>\n                })}\n              </Box>\n            )}\n          </Box>\n        ))}\n\n        <CommandPrompt\n          value={inputValue}\n          onChange={(event) => {\n            setInputValue(event.target.value)\n          }}\n          onKeyDown={onTerminalInputKeyDown}\n          className={classes.terminalInput}\n        />\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = ({ terminalHistory, currentUser, commands, files }: AppState) => ({\n  terminalHistory,\n  currentUser,\n  commands,\n  files,\n})\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => ({\n  addToHistory: (newEntries: TerminalHistoryEntry[]) => dispatch(addTerminalHistoryEntries(newEntries)),\n  clearHistory: () => dispatch(clearTerminalHistory()),\n  displayImage: (imageFileName: string) => dispatch(setCurrentImage(imageFileName)),\n  sshToNewUser: (user: string) => dispatch(switchUser(user)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommandLineComponent)\n","import { AnyAction } from 'redux'\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk'\nimport {\n  SET_CURRENT_USER,\n  CurrentUserActionTypes,\n  User,\n} from './types'\nimport { AppState } from '../..'\nimport { setCommands } from '../commands/actions'\nimport { setFiles } from '../files/actions'\nimport { FileState } from '../files/types'\n\nexport function setCurrentUser(newUser: User): CurrentUserActionTypes {\n  return {\n    type: SET_CURRENT_USER,\n    newUser,\n  }\n}\n\nexport function switchUser(user: string): ThunkAction<void, AppState, null, AnyAction> {\n  return async (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n\n    // Fetch commands for new user\n    fetch(`/commands?user_name=${user}`)\n      .then(response => response.text())\n      .then(response => {\n        dispatch(setCommands(JSON.parse(response)))\n      })\n      .catch((error) => console.error(`Error fetching commands for user ${user}: ${error}`))\n\n    // Fetch files for new user\n    fetch(`/files?user_name=${user}`)\n      .then(response => response.text())\n      .then(response => {\n        dispatch(setFiles(JSON.parse(response) as FileState))\n      })\n      .catch((error) => console.error(`Error fetching files for user ${user}: ${error}`))\n\n    dispatch(setCurrentUser(user as User))\n  }\n}\n","import {\n  SET_FILES,\n  CLEAR_FILES,\n  FileState,\n  FileActionTypes,\n} from './types'\n\nexport function setFiles(newFiles: FileState): FileActionTypes {\n  return {\n    type: SET_FILES,\n    newFiles,\n  }\n}\n\nexport function clearFiles(): FileActionTypes {\n  return {\n    type: CLEAR_FILES,\n  }\n}\n","export type FileState = {\n  [key in string]: {\n    file_type: string\n    content: string[]\n  }\n}\n\nexport const SET_FILES = 'SET_FILES'\nexport const CLEAR_FILES = 'CLEAR_FILES'\n\ninterface SetFilesAction {\n  type: typeof SET_FILES\n  newFiles: FileState\n}\n\ninterface ClearFilesAction {\n  type: typeof CLEAR_FILES\n}\n\nexport type FileActionTypes = SetFilesAction | ClearFilesAction\n","import { TerminalHistoryEntry, TerminalHistoryActionTypes } from \"../store/terminal-history/types\"\nimport { CurrentImageActionTypes } from \"../store/current-image/types\"\nimport { Command } from '../store/commands/types'\nimport { FileState } from \"../store/files/types\"\n\nexport const processCommand = (\n  terminalInput: string,\n  commands: {[key in Command]: string} | {},\n  files: FileState,\n  displayImage: (imageFileName: string) => CurrentImageActionTypes,\n  addToHistory: (newEntries: TerminalHistoryEntry[]) => TerminalHistoryActionTypes,\n  clearHistory: () => TerminalHistoryActionTypes,\n  sshToNewUser: (user: string) => void,\n) => {\n  const inputStrings = terminalInput.split(' ') // rename\n  const command = inputStrings[0]\n  const args = inputStrings.slice(1)\n\n  const updatedTerminalHistory: TerminalHistoryEntry[] = []\n  updatedTerminalHistory.push({ type: 'command', value: terminalInput || '' })\n\n  if (!command) {\n    addToHistory(updatedTerminalHistory)\n    return\n  }\n\n  const appendToTerminalOutput = (output: string | string[]) => {\n    if (typeof output === 'string') {\n      output = [output]\n    }\n\n    const newEntry: TerminalHistoryEntry = {\n      type: 'output',\n      value: output,\n    }\n    updatedTerminalHistory.push(newEntry)\n  }\n\n  // Performs logic handling when user attempts to ssh to another terminal.\n  const handleSsh = (userName: string, enteredPassword: string) => {\n    let actualPassword = ''\n\n    // dev note: all this logic has to be done in then() because of non blocking io model\n    fetch(`/password?user_name=${userName}`)\n      .then(response => response.text())\n      .then(response => {\n        actualPassword = response\n        let message: string = ''\n\n        if (actualPassword) {\n          if (enteredPassword === actualPassword) {\n            sshToNewUser(userName)\n            clearHistory()\n            addToHistory([{\n              type: 'output',\n              value: [`Switched to user ${userName}.`],\n            }])\n            return\n          } else {\n            message = 'Access denied. Invalid credentials.'\n          }\n        } else {\n          message = `Error: User '${userName}' not found.`\n        }\n        appendToTerminalOutput(message)\n        addToHistory(updatedTerminalHistory)\n        return\n      })\n      .catch((error) => console.error(`Error fetching password for user ${userName}: ${error}`))\n  }\n\n  // Command isn't in the list of available commands for this user.\n  if (!Object.keys(commands).includes(command)) {\n    appendToTerminalOutput(`${command}: command not found. Use 'help' to list available commands.`)\n    addToHistory(updatedTerminalHistory)\n    return\n  }\n\n  // Main command switch.\n  switch (command) {\n    case 'ls':\n      const sortedFileNames = Object.keys(files).sort((f1, f2) => f1.localeCompare(f2))\n      appendToTerminalOutput(sortedFileNames)\n      addToHistory(updatedTerminalHistory)\n      return\n    case 'cat':\n      const fileName = args[0]\n      if (!fileName) {\n        appendToTerminalOutput('Missing argument to command \"cat\". Usage: cat <file name>')\n        addToHistory(updatedTerminalHistory)\n        return\n      }\n      if (!Object.keys(files).includes(fileName)) {\n        appendToTerminalOutput(`cat: ${fileName}: No such file or directory`)\n        addToHistory(updatedTerminalHistory)\n        return\n      }\n\n      if (files[fileName].file_type === 'text') {\n        appendToTerminalOutput(files[fileName].content)\n      } else if (files[fileName].file_type === 'image') {\n        appendToTerminalOutput('Image displayed in separate window.')\n        displayImage(fileName)\n      }\n      addToHistory(updatedTerminalHistory)\n      return\n    case 'map':\n      appendToTerminalOutput('Map displayed in separate window.')\n      displayImage('map.png')\n      addToHistory(updatedTerminalHistory)\n      return\n    case 'ssh':\n      const userName = args[0]\n      const enteredPassword = args[1]\n\n      if (!enteredPassword) {\n        appendToTerminalOutput('Missing argument to command \"ssh\". Usage: ssh <user name> <user password>')\n        addToHistory(updatedTerminalHistory)\n        return\n      }\n      handleSsh(userName, enteredPassword)\n      return\n    case 'help':\n      Object.entries(commands).forEach(([commandName, description]) => {\n        appendToTerminalOutput(`${commandName}: ${description}`)\n      })\n      addToHistory(updatedTerminalHistory)\n      return\n    case 'power':\n      // TODO: actually switch the power off\n      appendToTerminalOutput('Power has been switched off.')\n      addToHistory(updatedTerminalHistory)\n      return\n    default:\n      appendToTerminalOutput(`${command}: command not found. Use 'help' to list available commands.`)\n      addToHistory(updatedTerminalHistory)\n  }\n}\n","import { FileState } from \"../store/files/types\";\n\nconst findCommonPrefix = (strings: string[]) => {\n  strings.sort((s1, s2) => s1.length - s2.length)\n  let prefix = strings[0]\n\n  strings.slice(1).forEach((string) => {\n    while (!string.startsWith(prefix)) {\n      prefix = prefix.substring(0, prefix.length - 1)\n    }\n  })\n  return prefix\n}\n\nexport const getAutocompleteFileName = (files: FileState, currentTerminalInput: string): string => {\n  const inputStrings = currentTerminalInput.split(' ')\n  const lastInput = inputStrings.slice(-1).pop()\n  \n  if (lastInput) {\n    const autocompleteMatches: string[] = []\n    Object.keys(files).forEach((fileName) => fileName.startsWith(lastInput) ? autocompleteMatches.push(fileName) : null)\n\n    let autocompletedFileName = ''\n    if (autocompleteMatches.length > 1) {\n      autocompletedFileName = findCommonPrefix(autocompleteMatches)\n    } else if (autocompleteMatches.length === 1) {\n      autocompletedFileName = autocompleteMatches[0]\n    }\n\n    if (autocompletedFileName) {\n      const commandWithoutLastWord = inputStrings.slice(0, inputStrings.length - 1)\n      commandWithoutLastWord.push(autocompletedFileName)\n      return commandWithoutLastWord.join(' ')\n    }\n  }\n  return ''\n}\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Paper from '@material-ui/core/Paper'\nimport Draggable from 'react-draggable'\nimport classnames from 'classnames'\nimport { makeStyles, Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  dialog: {\n    padding: 0,\n    borderRadius: '5px',\n    '& .MuiDialogContent-root': {\n      padding: 0,\n    },\n  },\n  dialogTitle: {\n    padding: spacing(0.5),\n    backgroundColor: '#E8E8E8',\n  },\n  margin: {\n    margin: spacing(1),\n  },\n  label: {\n    marginRight: spacing(1),\n  },\n  smallText: {\n    fontSize: '12px',\n  }\n}))\n\nfunction DraggablePaperComponent(props: any) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\ninterface Props {\n  open: boolean\n  onClose: () => void\n  children?: React.ReactNode\n  className?: string\n  title?: string\n}\n\nconst DraggableDialog: React.FC<Props> = ({ children, className, open, onClose, title = '' }) => {\n  const classes = useStyles()\n\n  return (\n      <Dialog\n        open={open}\n        onClose={onClose}\n        PaperComponent={DraggablePaperComponent}\n        aria-labelledby=\"draggable-dialog-title\"\n        className={classnames(classes.dialog, className)}\n        maxWidth='lg'\n      >\n        <DialogTitle style={{ cursor: 'move' }} className={classes.dialogTitle} id=\"draggable-dialog-title\">\n          <Typography variant='body1' align='center' className={classes.smallText}>{title}</Typography>\n        </DialogTitle>\n        <DialogContent>\n          {children}\n        </DialogContent>\n        <DialogActions>\n          <Button variant=\"contained\" color=\"primary\" onClick={onClose}>Close</Button>\n        </DialogActions>\n      </Dialog>\n  )\n}\n\nexport default DraggableDialog\n","import { connect } from 'react-redux'\nimport { AnyAction } from 'redux'\nimport React, { useState, useEffect } from 'react'\nimport DraggableDialog from './draggable.component'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AppState } from '..'\nimport { setCurrentImage } from '../store/current-image/actions'\nimport { makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles(() => ({\n  image: {\n    maxHeight: '40em',\n    maxWidth: '50em',\n  },\n}))\n\ntype MappedDispatch = ReturnType<typeof mapDispatchToProps>\ntype MappedState = ReturnType<typeof mapStateToProps>\n\nconst ImageDisplayComponent: React.FC<MappedDispatch & MappedState> = ({ currentImage, clearImage }) => {\n  const classes = useStyles()\n  const [openImage, setOpenImage] = useState(false)\n  \n  useEffect(() => {\n    if (currentImage) {\n      setOpenImage(true)\n    }\n  }, [currentImage])\n\n  const onClose = () => {\n    clearImage()\n    setOpenImage(false)\n  }\n\n  if (!currentImage) {\n    return null\n  }\n\n  return (\n    <DraggableDialog title={`Image - ${currentImage}`} open={openImage} onClose={onClose}>\n      <img src={`/image?file_name=${currentImage}`} className={classes.image} alt={currentImage} />\n    </DraggableDialog>\n  )\n}\n\nconst mapStateToProps = ({ currentImage }: AppState) => ({\n  currentImage\n})\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => ({\n  clearImage: () => dispatch(setCurrentImage('')),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageDisplayComponent)\n","import React from 'react'\nimport { makeStyles, Button } from '@material-ui/core'\nimport classnames from 'classnames'\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    backgroundColor: 'black',\n    color: 'white',\n    height: '35rem',\n    width: '50rem',\n    borderRadius: '7px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: spacing(10),\n  },\n  title: {\n    fontFamily: 'Roboto Mono',\n    fontSize: '1.6em',\n    fontWeight: 600,\n    textAlign: 'center',\n    userSelect: 'none',\n    marginTop: 0,\n  },\n  text: {\n    fontFamily: 'Roboto Mono',\n    fontSize: '1.3em',\n    fontWeight: 500,\n    textAlign: 'left',\n    color: 'white',\n    userSelect: 'none',\n    marginBlockStart: '30px',\n    marginBlockEnd: '30px',\n  },\n  button: {\n    fontFamily: 'Roboto Mono',\n    fontSize: '1.3em',\n    fontWeight: 500,\n  },\n  lightGreen: {\n    color: '#1ec700',\n  },\n}))\n\ninterface Props {\n  onButtonClick?: () => void,\n}\n\nconst GameIntroComponent: React.FC<Props> = ({ onButtonClick }) => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <div>\n        <h4 className={classes.title}>LABORATORY LOCKDOWN</h4>\n        <p className={classnames(classes.text, classes.lightGreen)}>\n          Welcome, Agent #24601.\n        </p>\n        <p className={classes.text}>\n          It has been discovered that the <span className={classes.lightGreen}>Corona Institute of Virology </span>\n          has been genetically engineering deadly viruses for use as biological weapons.\n        </p>\n        <p className={classes.text}>\n          Your mission is to <span className={classes.lightGreen}>hack into their computer system </span> and\n          <span className={classes.lightGreen}> shut down their laboratory power source</span>. This would disable\n          their security system and allow us to infiltrate the facility.\n        </p>\n        <p className={classes.text}>\n          Fortunately for you, we were able to obtain the login credentials of Ryan Fisher, a lower level employee.\n          To access their computer, type <span className={classes.lightGreen}>ssh r_fisher</span>. The password is\n          <span className={classes.lightGreen}> giraffes123</span>.\n        </p>\n        <p className={classes.text}>\n          The rest is up to you. Good luck!\n        </p>\n        <Button variant=\"outlined\" color=\"primary\" className={classes.button} onClick={onButtonClick}>\n          START\n        </Button>\n      </div>\n    </div>\n  )\n}\n\nexport default GameIntroComponent\n","import React, { useState, useEffect } from 'react'\nimport { Box, makeStyles } from '@material-ui/core'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AnyAction } from 'redux'\nimport { connect } from 'react-redux'\nimport CommandLineComponent from './command-line.component'\nimport ImageDisplayComponent from './image-display.component'\nimport { initDefaultCommands } from '../store/commands/actions'\nimport GameIntroComponent from './game-intro.component'\nimport { TerminalHistoryEntry } from '../store/terminal-history/types'\nimport { addTerminalHistoryEntries } from '../store/terminal-history/actions'\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    backgroundColor: '#01220f',\n    padding: spacing(8),\n  },\n}))\n\ntype MappedDispatch = ReturnType<typeof mapDispatchToProps>\n\nconst Test: React.FC<MappedDispatch> = ({ initDefaultCommands, addToHistory }) => {\n  const classes = useStyles()\n  const [startGame, setStartGame] = useState(false)\n\n  useEffect(() => {\n    initDefaultCommands()\n    addToHistory([{ type: 'output', value: ['Type \"ssh r_fisher giraffes123\" to proceed.'] }])\n  }, [])\n\n  return (\n    <Box display='flex' justifyContent='center' alignItems='center' className={classes.root}>\n      <div>\n        {startGame ? <CommandLineComponent /> : <GameIntroComponent onButtonClick={() => setStartGame(true)} />}\n      </div>\n      <ImageDisplayComponent />\n    </Box>\n  )\n}\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => ({\n  initDefaultCommands: () => dispatch(initDefaultCommands()),\n  addToHistory: (newEntries: TerminalHistoryEntry[]) => dispatch(addTerminalHistoryEntries(newEntries)),\n})\n\nexport default connect(null, mapDispatchToProps)(Test)\n","import { createMuiTheme } from '@material-ui/core/styles'\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ffffff',\n    },\n    secondary: {\n      main: '#1ec700',\n    },\n  },\n  typography: {\n    fontFamily: [\n      'Roboto Mono',\n      'Open Sans',\n      'Lato',\n      'Roboto',\n      'Helvetica Neue',\n      'Arial',\n      'sans-serif',\n    ].join(','),\n    fontSize: 14,\n    fontWeightLight: 300,\n    fontWeightRegular: 400,\n    fontWeightMedium: 500\n  }\n})\n","import React from 'react';\nimport './App.css';\nimport Test from './components/test.tsx'\nimport { MuiThemeProvider } from '@material-ui/core/styles'\nimport { theme } from './theme/theme.ts'\nimport { Helmet } from 'react-helmet'\n\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    {/* <Provider store={store}>\n      <Router history={appHistory} routes={Routes} />\n    </Provider> */}\n    <div className=\"App\">\n      <header>\n        <Helmet><title>{ 'Laboratory Lockdown' }</title></Helmet>\n      </header>\n      <body>\n        <Test />\n      </body>\n    </div>\n  </MuiThemeProvider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { List } from 'immutable'\nimport {\n  ADD_TERMINAL_HISTORY_ENTRIES,\n  CLEAR_TERMINAL_HISTORY,\n  TerminalHistoryActionTypes,\n  TerminalHistoryState,\n} from './types'\n\nconst initialState: TerminalHistoryState = List()\n\nexport function terminalHistoryReducer(state = initialState, action: TerminalHistoryActionTypes): TerminalHistoryState {\n  switch (action.type) {\n    case ADD_TERMINAL_HISTORY_ENTRIES:\n      return state.concat(action.payload)\n    case CLEAR_TERMINAL_HISTORY:\n      return initialState\n    default:\n      return state\n  }\n}\n","import {\n  CurrentUserState,\n  SET_CURRENT_USER,\n  CurrentUserActionTypes,\n} from './types'\n\nconst initialState: CurrentUserState = ''\n\nexport function currentUserReducer(state = initialState, action: CurrentUserActionTypes): CurrentUserState {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return action.newUser\n    default:\n      return state\n  }\n}\n","import {\n  CurrentImageState,\n  SET_CURRENT_IMAGE,\n  CurrentImageActionTypes,\n} from './types'\n\nconst initialState: CurrentImageState = ''\n\nexport function currentImageReducer(state = initialState, action: CurrentImageActionTypes): CurrentImageState {\n  switch (action.type) {\n    case SET_CURRENT_IMAGE:\n      return action.imageFileName\n    default:\n      return state\n  }\n}\n","import {\n    CurrentCommandsState,\n    SET_COMMANDS,\n    CommandActionTypes,\n  } from './types'\n  \n  const initialState: CurrentCommandsState = {}\n  \n  export function commandReducer(state = initialState, action: CommandActionTypes): CurrentCommandsState {\n    switch (action.type) {\n      case SET_COMMANDS:\n        return action.newCommands\n      default:\n        return state\n    }\n  }\n  ","import {\n  SET_FILES,\n  CLEAR_FILES,\n  FileState,\n  FileActionTypes,\n} from './types'\n\nconst initialState: FileState = {}\n\nexport function fileReducer(state = initialState, action: FileActionTypes): FileState {\n  switch (action.type) {\n    case SET_FILES:\n      return action.newFiles\n    case CLEAR_FILES:\n      return {}\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport ReduxLogger from 'redux-logger'\nimport ReduxThunk from 'redux-thunk'\n\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { terminalHistoryReducer } from './store/terminal-history/reducers'\nimport { currentUserReducer } from './store/current-user/reducers'\nimport { currentImageReducer } from './store/current-image/reducers'\nimport { commandReducer } from './store/commands/reducers'\nimport { fileReducer } from './store/files/reducers'\n\nconst createRootReducer = () => combineReducers({\n  terminalHistory: terminalHistoryReducer,\n  currentUser: currentUserReducer,\n  currentImage: currentImageReducer,\n  commands: commandReducer,\n  files: fileReducer,\n})\n\nexport type AppState = Exclude<Parameters<ReturnType<typeof createRootReducer>>[0], undefined>\n\nconst store = createStore(\n  createRootReducer(),\n  applyMiddleware(ReduxLogger, ReduxThunk),\n);\n\nReactDOM.render(\n  <Provider store={store} >\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}