{"version":3,"sources":["components/command-prompt.component.tsx","store/current-image/actions.ts","store/current-image/types.ts","components/command-line.component.tsx","store/terminal-history/actions.ts","store/terminal-history/types.ts","utils/commands.ts","components/draggable.component.tsx","components/image-display.component.tsx","components/test.tsx","store/current-user/actions.ts","store/current-user/types.ts","store/commands/actions.ts","store/commands/types.ts","store/files/actions.ts","store/files/types.ts","theme/theme.ts","App.js","serviceWorker.js","store/terminal-history/reducers.ts","store/current-user/reducers.ts","store/current-image/reducers.ts","store/commands/reducers.ts","store/files/reducers.ts","index.tsx"],"names":["useStyles","makeStyles","root","width","inputRoot","input","color","padding","backgroundColour","commandPrompt","marginRight","spacing","connect","currentUser","value","onChange","onKeyDown","className","classes","commandPromptLabel","Box","display","justifyContent","alignItems","flexDirection","flexWrap","classnames","Typography","noWrap","InputBase","inputProps","fullWidth","setCurrentImage","imageFileName","type","textAlign","backgroundColor","borderRadius","height","overflow","overflowY","terminal","terminalInput","terminalHistory","commands","files","dispatch","addToHistory","newEntries","payload","addTerminalHistoryEntries","clearHistory","displayImage","useState","Stack","commandHistory","setCommandHistory","commandHistoryIndex","setCommandHistoryIndex","inputValue","setInputValue","terminalRootRef","useRef","useEffect","current","scrollIntoView","behavior","block","ref","map","entry","align","line","event","target","key","push","inputStrings","split","command","args","slice","updatedTerminalHistory","appendToTerminalOutput","output","newEntry","Object","keys","includes","fileName","file_type","content","userName","enteredPassword","actualPassword","fetch","then","response","text","catch","error","console","handleSsh","entries","forEach","commandName","description","processCommand","size","get","dialog","dialogTitle","margin","label","smallText","fontSize","DraggablePaperComponent","props","handle","cancel","Paper","DraggableDialog","children","open","onClose","title","Dialog","PaperComponent","aria-labelledby","maxWidth","DialogTitle","style","cursor","id","variant","DialogContent","DialogActions","Button","onClick","image","currentImage","clearImage","openImage","setOpenImage","src","setUser","user","newUser","setCommands","newCommands","setFiles","newFiles","log","JSON","parse","theme","createMuiTheme","typography","fontFamily","join","fontWeightLight","fontWeightRegular","fontWeightMedium","App","window","token","Boolean","location","hostname","match","initialState","List","terminalHistoryReducer","state","action","concat","currentUserReducer","currentImageReducer","commandReducer","fileReducer","store","createStore","combineReducers","applyMiddleware","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"js/main.7d76530e.chunk.js","sourcesContent":["import React from 'react'\nimport { Box, InputBase, makeStyles, Typography } from '@material-ui/core'\nimport classnames from 'classnames'\nimport { AppState } from '..'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { connect, MapDispatchToProps } from 'react-redux'\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    width: '100%',\n  },\n  inputRoot: {\n    width: '100%',\n  },\n  input: {\n    color: 'white',\n    padding: 0,\n\n    backgroundColour: 'red',\n    '& .MuiInputBase-input': {\n      padding: 0,\n      width: '100%',\n    },\n    '& .MuiInputBase-root': {\n      width: '100%',\n    },\n  },\n  commandPrompt: {\n    marginRight: spacing(1),\n  },\n}))\n\ntype MappedState = ReturnType<typeof mapStateToProps>\n\ninterface Props {\n  value: string\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void\n  onKeyDown: (e: React.KeyboardEvent) => void\n  className?: string\n}\n\nconst CommandPrompt: React.FC<MappedState & Props> = ({\n  currentUser,\n  value,\n  onChange,\n  onKeyDown,\n  className = '',\n}) => {\n  const classes = useStyles()\n  const commandPromptLabel = `${currentUser} $`\n\n  return (\n    <Box\n      display='flex'\n      justifyContent='flex-start'\n      alignItems='center'\n      flexDirection='row'\n      flexWrap='nowrap'\n      className={classnames(classes.root, className)}\n    >\n    <Box>\n      <Typography className={classes.commandPrompt} noWrap>{commandPromptLabel}</Typography>\n    </Box>\n    <InputBase\n      className={classes.input}\n      value={value}\n      onChange={onChange}\n      inputProps={{ 'aria-label': 'naked' }}\n      onKeyDown={onKeyDown}\n      fullWidth\n      classes={{ // this doesn't work :(\n        root: classes.inputRoot,\n      }}\n    />\n  </Box>\n  )\n}\n\nconst mapStateToProps = ({ currentUser }: AppState) => ({\n  currentUser,\n})\n\nexport default connect(mapStateToProps)(CommandPrompt)\n","import {\n  SET_CURRENT_IMAGE,\n  CurrentImageActionTypes,\n} from './types'\n\nexport function setCurrentImage(imageFileName: string): CurrentImageActionTypes {\n  return {\n    type: SET_CURRENT_IMAGE,\n    imageFileName,\n  }\n}\n","export type CurrentImageState = string // name of image file\n\nexport const SET_CURRENT_IMAGE = 'SET_CURRENT_IMAGE'\n\ninterface SetCurrentImageAction {\n  type: typeof SET_CURRENT_IMAGE\n  imageFileName: string\n}\n\nexport type CurrentImageActionTypes = SetCurrentImageAction // | ClearTerminalHistoryAction\n","import React, { useState, useEffect, useRef } from 'react'\nimport { Box, makeStyles, Typography } from '@material-ui/core'\nimport CommandPrompt from './command-prompt.component'\nimport { processCommand } from '../utils/commands'\nimport { TerminalHistoryEntry } from '../store/terminal-history/types.js'\nimport { AppState } from '..'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AnyAction } from 'redux'\nimport { connect } from 'react-redux'\nimport { addTerminalHistoryEntries, clearTerminalHistory } from '../store/terminal-history/actions'\nimport { setCurrentImage } from '../store/current-image/actions'\nimport { Stack } from 'immutable'\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    textAlign: 'left',\n    backgroundColor: 'black',\n    color: 'white',\n    borderRadius: '5px',\n    height: '55em',\n    width: '70em',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    overflow: 'hidden',\n    overflowY: 'scroll',\n  },\n  terminal: {\n    padding: spacing(4),\n  },\n  commandPrompt: {\n    marginRight: spacing(1),\n    color: '#1ec700',\n  },\n  terminalInput: {\n    color: '#1ec700',\n  },\n}))\n\ntype MappedDispatch = ReturnType<typeof mapDispatchToProps>\ntype MappedState = ReturnType<typeof mapStateToProps>\n\nconst CommandLineComponent: React.FC<MappedDispatch & MappedState> = ({\n  currentUser,\n  terminalHistory,\n  addToHistory,\n  clearHistory,\n  displayImage,\n  commands,\n  files,\n}) => {\n  const classes = useStyles()\n  const [commandHistory, setCommandHistory] = useState<Stack<string>>(Stack())\n  const [commandHistoryIndex, setCommandHistoryIndex] = useState<number>(-1) // index of the command history item being autofilled\n  const [inputValue, setInputValue] = useState<string>('')\n  const terminalRootRef = useRef<HTMLDivElement>(null)\n\n  const onTerminalInputKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      setCommandHistory(commandHistory.push(inputValue))\n      setCommandHistoryIndex(-1)\n\n      if (inputValue === 'clear') {\n        setCommandHistory(Stack())\n        setCommandHistoryIndex(-1)\n        clearHistory()\n      } else {\n        processCommand(inputValue, commands, files, displayImage, addToHistory)\n      }\n      setInputValue('')\n    } else if (event.key === 'ArrowUp') {\n      if (commandHistoryIndex === commandHistory.size - 1) {\n        return\n      }\n      setCommandHistoryIndex(commandHistoryIndex + 1)\n      setInputValue(commandHistory.get(commandHistoryIndex + 1) || '')\n    } else if (event.key === 'ArrowDown') {\n      if (commandHistoryIndex === -1) {\n        return\n      } else if (commandHistoryIndex === 0) {\n        setInputValue('')\n        return\n      }\n      setCommandHistoryIndex(commandHistoryIndex - 1)\n      setInputValue(commandHistory.get(commandHistoryIndex - 1) || '')\n    } else {\n      setCommandHistoryIndex(-1)\n    }\n  }\n\n  const scrollToBottom = () => {\n    if (terminalRootRef.current) {\n      terminalRootRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' })\n    }\n  }\n  useEffect(scrollToBottom, [terminalHistory])\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.terminal} ref={terminalRootRef}>\n        {terminalHistory.map((entry) => (\n          <Box\n            display='flex'\n            justifyContent='flex-start'\n            alignItems='center'\n            flexDirection='row'\n            flexWrap='nowrap'\n          >\n            {entry.type === 'command' && (\n              <>\n                <Typography align='left' className={classes.commandPrompt} noWrap>{`${currentUser} $`}</Typography>\n                <Typography align='left'>{entry.value}</Typography>\n              </>\n            )}\n            {entry.type === 'output' && (\n              <Box display='flex' justifyContent='flex-start' alignItems='flex-start' flexDirection='column'>\n                {entry.value.map((line: string) => {\n                  return line === \"\\n\" ? <br /> : <Typography align='left'>{line}</Typography>\n                })}\n              </Box>\n            )}\n          </Box>\n        ))}\n\n        <CommandPrompt\n          value={inputValue}\n          onChange={(event) => {\n            setInputValue(event.target.value)\n          }}\n          onKeyDown={onTerminalInputKeyDown}\n          className={classes.terminalInput}\n        />\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = ({ terminalHistory, currentUser, commands, files }: AppState) => ({\n  terminalHistory,\n  currentUser,\n  commands,\n  files,\n})\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => ({\n  addToHistory: (newEntries: TerminalHistoryEntry[]) => dispatch(addTerminalHistoryEntries(newEntries)),\n  clearHistory: () => dispatch(clearTerminalHistory()),\n  displayImage: (imageFileName: string) => dispatch(setCurrentImage(imageFileName)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommandLineComponent)\n","import { List } from 'immutable'\nimport {\n  TerminalHistoryEntry,\n  ADD_TERMINAL_HISTORY_ENTRIES,\n  CLEAR_TERMINAL_HISTORY,\n  TerminalHistoryActionTypes,\n} from './types'\n\n// TypeScript infers that this function is returning AddHistoryEntriesAction\nexport function addTerminalHistoryEntries(newEntries: TerminalHistoryEntry[]): TerminalHistoryActionTypes {\n  return {\n    type: ADD_TERMINAL_HISTORY_ENTRIES,\n    payload: newEntries,\n  }\n}\n\n// TypeScript infers that this function is returning ClearTerminalHistoryAction\nexport function clearTerminalHistory(): TerminalHistoryActionTypes {\n  return {\n    type: CLEAR_TERMINAL_HISTORY,\n  }\n}\n","import { List } from 'immutable'\n\nexport type TerminalHistoryEntry = {\n  type: 'command'\n  value: string\n} | {\n  type: 'output',\n  value: string[]\n}\n\nexport type TerminalHistoryState = List<TerminalHistoryEntry>\n\nexport const ADD_TERMINAL_HISTORY_ENTRIES = 'ADD_TERMINAL_HISTORY_ENTRIES'\nexport const CLEAR_TERMINAL_HISTORY = 'CLEAR_TERMINAL_HISTORY'\n\ninterface AddHistoryEntriesAction {\n  type: typeof ADD_TERMINAL_HISTORY_ENTRIES\n  payload: TerminalHistoryEntry[]\n}\n\ninterface ClearTerminalHistoryAction {\n  type: typeof CLEAR_TERMINAL_HISTORY\n}\n\nexport type TerminalHistoryActionTypes = AddHistoryEntriesAction | ClearTerminalHistoryAction\n","import { TerminalHistoryEntry, TerminalHistoryActionTypes } from \"../store/terminal-history/types\"\nimport { CurrentImageActionTypes } from \"../store/current-image/types\"\nimport { Command } from '../store/commands/types'\nimport { FileState } from \"../store/files/types\"\n\nexport const processCommand = (\n  terminalInput: string,\n  commands: {[key in Command]: string} | {},\n  files: FileState,\n  displayImage: (imageFileName: string) => CurrentImageActionTypes,\n  // TODO: add a dispatch function to display a file\n  addToHistory: (newEntries: TerminalHistoryEntry[]) => TerminalHistoryActionTypes,\n) => {\n  const inputStrings = terminalInput.split(' ') // rename\n  const command = inputStrings[0]\n  const args = inputStrings.slice(1)\n\n  const updatedTerminalHistory: TerminalHistoryEntry[] = []\n  updatedTerminalHistory.push({ type: 'command', value: terminalInput || '' })\n\n  if (!command) {\n    addToHistory(updatedTerminalHistory)\n    return\n  }\n\n  const appendToTerminalOutput = (output: string | string[]) => {\n    if (typeof output === 'string') {\n      output = [output]\n    }\n\n    const newEntry: TerminalHistoryEntry = {\n      type: 'output',\n      value: output,\n    }\n    updatedTerminalHistory.push(newEntry)\n  }\n\n  // Performs logic handling when user attempts to ssh to another terminal.\n  const handleSsh = (userName: string, enteredPassword: string) => {\n    let actualPassword = ''\n\n    // dev note: all this logic has to be done in then() because of non blocking io model\n    fetch(`/password?user_name=${userName}`)\n      .then(response => response.text())\n      .then(response => {\n        actualPassword = response\n        let message: string = ''\n\n        if (actualPassword) {\n          if (enteredPassword === actualPassword) {\n            message = 'hell yea'\n          } else {\n            message = 'Access denied. Invalid credentials.'\n          }\n        } else {\n          message = 'Error: User not found.'\n        }\n        appendToTerminalOutput(message)\n        addToHistory(updatedTerminalHistory)\n        return\n      })\n      .catch((error) => console.error(`Error fetching password for user ${userName}: ${error}`))\n  }\n\n  // Command isn't in the list of available commands for this user.\n  if (!Object.keys(commands).includes(command)) {\n    appendToTerminalOutput(`${command}: command not found. Use 'help' to list available commands.`)\n    addToHistory(updatedTerminalHistory)\n    return\n  }\n\n  // Main command switch.\n  switch (command) {\n    case 'ls':\n      appendToTerminalOutput(Object.keys(files))\n      addToHistory(updatedTerminalHistory)\n      return\n    case 'cat':\n      const fileName = args[0]\n      if (!fileName) {\n        appendToTerminalOutput('Missing argument to command \"cat\". Usage: cat <file name>')\n        addToHistory(updatedTerminalHistory)\n        return\n      }\n      if (!Object.keys(files).includes(fileName)) {\n        appendToTerminalOutput(`cat: ${fileName}: No such file or directory`)\n        addToHistory(updatedTerminalHistory)\n        return\n      }\n\n      if (files[fileName].file_type === 'text') {\n        appendToTerminalOutput(files[fileName].content)\n      } else if (files[fileName].file_type === 'image') {\n        displayImage(fileName)\n      }\n      addToHistory(updatedTerminalHistory)\n      return\n    case 'map':\n      appendToTerminalOutput('Map displayed in separate window.')\n      displayImage('map')\n      addToHistory(updatedTerminalHistory)\n      return\n    case 'ssh':\n      const userName = args[0]\n      const enteredPassword = args[1]\n\n      if (!enteredPassword) {\n        appendToTerminalOutput('Missing argument to command \"ssh\". Usage: ssh <user name> <user password>')\n        addToHistory(updatedTerminalHistory)\n        return\n      }\n      handleSsh(userName, enteredPassword)\n      return\n    case 'help':\n      Object.entries(commands).forEach(([commandName, description]) => {\n        appendToTerminalOutput(`${commandName}: ${description}`)\n      })\n      addToHistory(updatedTerminalHistory)\n      return\n    default:\n      appendToTerminalOutput(`${command}: command not found. Use 'help' to list available commands.`)\n      addToHistory(updatedTerminalHistory)\n  }\n}\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Paper from '@material-ui/core/Paper'\nimport Draggable from 'react-draggable'\nimport classnames from 'classnames'\nimport { makeStyles, Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  dialog: {\n    padding: 0,\n    borderRadius: '5px',\n    '& .MuiDialogContent-root': {\n      padding: 0,\n    },\n  },\n  dialogTitle: {\n    padding: spacing(0.5),\n    backgroundColor: '#E8E8E8',\n  },\n  margin: {\n    margin: spacing(1),\n  },\n  label: {\n    marginRight: spacing(1),\n  },\n  smallText: {\n    fontSize: '12px',\n  }\n}))\n\nfunction DraggablePaperComponent(props: any) {\n  return (\n    <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\ninterface Props {\n  open: boolean\n  onClose: () => void\n  children?: React.ReactNode\n  className?: string\n  title?: string\n}\n\nconst DraggableDialog: React.FC<Props> = ({ children, className, open, onClose, title = '' }) => {\n  const classes = useStyles()\n\n  return (\n      <Dialog\n        open={open}\n        onClose={onClose}\n        PaperComponent={DraggablePaperComponent}\n        aria-labelledby=\"draggable-dialog-title\"\n        className={classnames(classes.dialog, className)}\n        maxWidth='lg'\n      >\n        <DialogTitle style={{ cursor: 'move' }} className={classes.dialogTitle} id=\"draggable-dialog-title\">\n          <Typography variant='body1' align='center' className={classes.smallText}>{title}</Typography>\n        </DialogTitle>\n        <DialogContent>\n          {children}\n        </DialogContent>\n        <DialogActions>\n          <Button variant=\"contained\" color=\"primary\" onClick={onClose}>Close</Button>\n        </DialogActions>\n      </Dialog>\n  )\n}\n\nexport default DraggableDialog\n","import { connect } from 'react-redux'\nimport { AnyAction } from 'redux'\nimport React, { useState, useEffect } from 'react'\nimport DraggableDialog from './draggable.component'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AppState } from '..'\nimport { setCurrentImage } from '../store/current-image/actions'\nimport { makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles(() => ({\n  image: {\n    height: '40em',\n    width: '40em',\n  },\n}))\n\ntype MappedDispatch = ReturnType<typeof mapDispatchToProps>\ntype MappedState = ReturnType<typeof mapStateToProps>\n\nconst ImageDisplayComponent: React.FC<MappedDispatch & MappedState> = ({ currentImage, clearImage }) => {\n  const classes = useStyles()\n  const [openImage, setOpenImage] = useState(false)\n  \n  useEffect(() => {\n    if (currentImage) {\n      setOpenImage(true)\n    }\n  }, [currentImage])\n\n  const onClose = () => {\n    clearImage()\n    setOpenImage(false)\n  }\n\n  return (\n    <DraggableDialog title='image' open={openImage} onClose={onClose}>\n      <img src={`/${currentImage}`} className={classes.image} />\n    </DraggableDialog>\n  )\n}\n\nconst mapStateToProps = ({ currentImage }: AppState) => ({\n  currentImage\n})\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => ({\n  clearImage: () => dispatch(setCurrentImage('')),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageDisplayComponent)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { Box, makeStyles } from '@material-ui/core'\nimport { AppState } from '..'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AnyAction } from 'redux'\nimport { connect } from 'react-redux'\nimport { setCurrentUser } from '../store/current-user/actions'\nimport CommandLineComponent from './command-line.component'\nimport ImageDisplayComponent from './image-display.component'\nimport { setCommands } from '../store/commands/actions'\nimport { Command } from '../store/commands/types'\nimport { setFiles } from '../store/files/actions'\nimport { FileState } from '../store/files/types'\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  terminal: {\n    padding: 0,\n    borderRadius: '5px',\n    '& .MuiDialogContent-root': {\n      padding: 0,\n    },\n  },\n}))\n\ntype MappedDispatch = ReturnType<typeof mapDispatchToProps>\ntype MappedState = ReturnType<typeof mapStateToProps>\n\nconst Test: React.FC<MappedDispatch & MappedState> = ({ setUser, setCommands, setFiles }) => {\n  const classes = useStyles()\n\n  // TODO: refactor to use redux-thunk\n  useEffect(() => {\n    fetch('/password?user_name=r_fisher')\n      .then(response => response.text())\n      .then(response => {\n        console.log(`password: ${response}`)\n      })\n      .catch(error => console.log('error'))\n\n    fetch('/commands?user_name=r_fisher')\n      .then(response => response.text())\n      .then(response => {\n        console.log(`commands: ${response}`)\n        setCommands(JSON.parse(response))\n      })\n      .catch(error => console.log('error'))\n\n    fetch('/files?user_name=r_fisher')\n      .then(response => response.text())\n      .then(response => {\n        setFiles(JSON.parse(response) as FileState)\n        console.log(response)\n      })\n      .catch(error => console.log('error'))\n    setUser('a_cai@corona')\n  }, [])\n\n  return (\n    <Box display='flex' justifyContent='center' alignItems='center'>\n      <div className={classes.terminal}>\n        <CommandLineComponent />\n      </div>\n      <ImageDisplayComponent />\n    </Box>\n  )\n}\n\nconst mapStateToProps = ({ terminalHistory }: AppState) => ({\n  // terminalHistory,\n})\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => ({\n  setUser: (user: string) => dispatch(setCurrentUser(user)),\n  setCommands: (commands: {[key in Command]: string}) => dispatch(setCommands(commands)),\n  setFiles: (files: FileState) => dispatch(setFiles(files)),\n})\n\n// export default Test\nexport default connect(mapStateToProps, mapDispatchToProps)(Test)\n","import {\n  SET_CURRENT_USER,\n  CurrentUserActionTypes,\n} from './types'\n\nexport function setCurrentUser(newUser: string): CurrentUserActionTypes {\n  return {\n    type: SET_CURRENT_USER,\n    newUser,\n  }\n}\n","export type CurrentUserState = string // TODO: this should technically be keyof the user info obj\n\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER'\n\ninterface SetCurrentUserAction {\n  type: typeof SET_CURRENT_USER\n  newUser: string\n}\n\nexport type CurrentUserActionTypes = SetCurrentUserAction // | ClearTerminalHistoryAction\n","import {\n  SET_COMMANDS,\n  Command,\n  CommandActionTypes,\n} from './types'\n\nexport function setCommands(newCommands: {[key in Command]: string}): CommandActionTypes {\n  return {\n    type: SET_COMMANDS,\n    newCommands,\n  }\n}\n","export type Command = 'ls' | 'cat' | 'ssh' | 'map' | 'help' | 'power'\nexport type CurrentCommandsState = { [key in Command]: string } | {}\n\nexport const SET_COMMANDS = 'SET_COMMANDS'\n\ninterface SetCommandsAction {\n  type: typeof SET_COMMANDS\n  newCommands: { [key in Command]: string }\n}\n\nexport type CommandActionTypes = SetCommandsAction // | ClearTerminalHistoryAction\n","import {\n  SET_FILES,\n  CLEAR_FILES,\n  FileState,\n  FileActionTypes,\n} from './types'\n\nexport function setFiles(newFiles: FileState): FileActionTypes {\n  return {\n    type: SET_FILES,\n    newFiles,\n  }\n}\n\nexport function clearFiles(): FileActionTypes {\n  return {\n    type: CLEAR_FILES,\n  }\n}\n","export type FileState = {\n  [key in string]: {\n    file_type: string\n    content: string[]\n  }\n}\n\nexport const SET_FILES = 'SET_FILES'\nexport const CLEAR_FILES = 'CLEAR_FILES'\n\ninterface SetFilesAction {\n  type: typeof SET_FILES\n  newFiles: FileState\n}\n\ninterface ClearFilesAction {\n  type: typeof CLEAR_FILES\n}\n\nexport type FileActionTypes = SetFilesAction | ClearFilesAction\n","import { createMuiTheme } from '@material-ui/core/styles'\n\nexport const theme = createMuiTheme({\n  typography: {\n    fontFamily: [\n      'Roboto Mono',\n      '\"Open Sans\"',\n      'Lato',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n    ].join(','),\n    fontSize: 14,\n    fontWeightLight: 300,\n    fontWeightRegular: 400,\n    fontWeightMedium: 500\n  }\n})\n","import React from 'react';\nimport './App.css';\nimport Test from './components/test.tsx'\nimport { MuiThemeProvider } from '@material-ui/core/styles'\nimport { theme } from './theme/theme.ts'\n\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    {/* <Provider store={store}>\n      <Router history={appHistory} routes={Routes} />\n    </Provider> */}\n    <div className=\"App\">\n      <header>\n        <p>My Token = {window.token}</p>\n      </header>\n      <body>\n        <Test />\n      </body>\n    </div>\n  </MuiThemeProvider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { List } from 'immutable'\nimport {\n  TerminalHistoryEntry,\n  ADD_TERMINAL_HISTORY_ENTRIES,\n  CLEAR_TERMINAL_HISTORY,\n  TerminalHistoryActionTypes,\n  TerminalHistoryState,\n} from './types'\n\nconst initialState: TerminalHistoryState = List()\n\nexport function terminalHistoryReducer(state = initialState, action: TerminalHistoryActionTypes): TerminalHistoryState {\n  switch (action.type) {\n    case ADD_TERMINAL_HISTORY_ENTRIES:\n      return state.concat(action.payload)\n    case CLEAR_TERMINAL_HISTORY:\n      return initialState\n    default:\n      return state\n  }\n}\n","import {\n  CurrentUserState,\n  SET_CURRENT_USER,\n  CurrentUserActionTypes,\n} from './types'\n\nconst initialState: CurrentUserState = ''\n\nexport function currentUserReducer(state = initialState, action: CurrentUserActionTypes): CurrentUserState {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return action.newUser\n    default:\n      return state\n  }\n}\n","import {\n  CurrentImageState,\n  SET_CURRENT_IMAGE,\n  CurrentImageActionTypes,\n} from './types'\n\nconst initialState: CurrentImageState = ''\n\nexport function currentImageReducer(state = initialState, action: CurrentImageActionTypes): CurrentImageState {\n  switch (action.type) {\n    case SET_CURRENT_IMAGE:\n      return action.imageFileName\n    default:\n      return state\n  }\n}\n","import {\n    CurrentCommandsState,\n    SET_COMMANDS,\n    CommandActionTypes,\n  } from './types'\n  \n  const initialState: CurrentCommandsState = {}\n  \n  export function commandReducer(state = initialState, action: CommandActionTypes): CurrentCommandsState {\n    switch (action.type) {\n      case SET_COMMANDS:\n        return action.newCommands\n      default:\n        return state\n    }\n  }\n  ","import {\n  SET_FILES,\n  CLEAR_FILES,\n  FileState,\n  FileActionTypes,\n} from './types'\n\nconst initialState: FileState = {}\n\nexport function fileReducer(state = initialState, action: FileActionTypes): FileState {\n  switch (action.type) {\n    case SET_FILES:\n      return action.newFiles\n    case CLEAR_FILES:\n      return {}\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport logger from 'redux-logger'\n\nimport { terminalHistoryReducer } from './store/terminal-history/reducers'\nimport { currentUserReducer } from './store/current-user/reducers'\nimport { currentImageReducer } from './store/current-image/reducers'\nimport { commandReducer } from './store/commands/reducers'\nimport { fileReducer } from './store/files/reducers'\n\nconst createRootReducer = () => combineReducers({\n  terminalHistory: terminalHistoryReducer,\n  currentUser: currentUserReducer,\n  currentImage: currentImageReducer,\n  commands: commandReducer,\n  files: fileReducer,\n})\n\nexport type AppState = Exclude<Parameters<ReturnType<typeof createRootReducer>>[0], undefined>\n\nconst store = createStore(\n  createRootReducer(),\n  applyMiddleware(logger),\n  // composeEnhancers(\n  //     enhancer,\n  //     middlewareApplication\n  // )\n);\n\nReactDOM.render(\n  <Provider store={store} >\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}